// Fetch product data from the backend API
async function fetchProductData() {
	try {
		const response = await fetch(`/api/products/`);
		if (!response.ok) {
			throw new Error("Failed to fetch product data");
		}
		const products = await response.json();

		return products;
	} catch (error) {
		console.error(error);
		// Handle error case
		return null;
	}
}


function renderProductDetail(product) {
	const detailContainer = document.querySelector(".detail");
	detailContainer.innerHTML = `
      <img src="${product.imageUrl}" width="400px" height="500px">
      <div class="cloth">${product.name}</div>
      <div class="cloth">${product.context}</div>
      <div class="cloth2">${product.price}</div>
      <button class="button" data-prd-id="${product.id}">Add Cart</button>
      <p>${product.description}</p>
    `;
	const addToCartButton = detailContainer.querySelector(".button");
	addToCartButton.addEventListener("click", function() {
		console.log("clicked")
		const productId = addToCartButton.getAttribute("data-prd-id");
		addToCart(productId);
	});
}
function addToCart(productId) {
	// 사용자 정보를 가져오기 위해 세션에서 토큰 값을 사용하지 않고 요청을 보냅니다.
	fetch('/api/cart/add/' + productId, {
		method: 'POST',
		headers: {
			'Content-Type': 'application/json'
		}
	})
		.then(response => {
			if (response.status === 401) {
				// 로그인되지 않은 사용자일 경우 로그인 페이지로 이동
				const confirmMessage = '장바구니에 추가하기 위해서는 로그인을 먼저 해주세요.';
				if (confirm(confirmMessage)) {
					window.location.href = '/login';
				}
			} else if (response.ok) {
				// 상품이 성공적으로 추가된 경우에 대한 처리
				// 예: 장바구니 아이콘 업데이트, 메시지 표시 등
				console.log('Product added to cart successfully');
			} else {
				// 기타 오류에 대한 처리
				console.error('Failed to add product to cart:', response.statusText);
			}
		})
		.catch(error => {
			console.error('Failed to add product to cart:', error);
		});
}





function renderProductList(products) {
	const listContainer = document.querySelector(".list");
	listContainer.innerHTML = "";

	if (products && products.length > 0) {
		products.forEach((product) => {
			const listItem = document.createElement("li");
			const link = document.createElement("a");
			const section = document.createElement("div");
			const image = document.createElement("img");
			const infoBox = document.createElement("div");
			const name = document.createElement("div");
			const context = document.createElement("div");
			const price = document.createElement("div");

			image.src = product.imageUrl;
			section.classList.add("section");
			section.appendChild(image);

			name.classList.add("clothes");
			name.textContent = product.name;

			context.classList.add("context");
			context.textContent = product.context;

			price.classList.add("price");
			price.textContent = product.price;

			infoBox.classList.add("info-box");
			infoBox.appendChild(name);
			infoBox.appendChild(context);
			infoBox.appendChild(price);

			link.appendChild(section);
			link.appendChild(infoBox);

			listItem.appendChild(link);
			listContainer.appendChild(listItem);

			link.addEventListener("click", function() {
				const url = `/products/${product.id}`;
				const newUrl = url.replace(/#.*/, ''); // Remove the hash part of the URL
				window.history.pushState(null, null, newUrl);
				renderProductDetail(product);
			});
		});
	} else {
		// Handle case when product data is not available
		listContainer.textContent = "No products found.";
	}
}

// Initialize the page
async function initializePage() {
	const products = await fetchProductData();
	renderProductDetail(products[0]);
	renderProductList(products);
}

function filterProductList(searchText) {
	const productList = document.querySelectorAll(".list");
	let hasMatchingProduct = false;

	productList.forEach((list) => {
		const items = list.querySelectorAll("li");
		items.forEach((item) => {
			const productNameElement = item.querySelector(".clothes");
			if (productNameElement) {
				const productName = productNameElement.innerText.toLowerCase();
				if (productName.includes(searchText.toLowerCase())) {
					item.style.display = "block";
					hasMatchingProduct = true;
				} else {
					item.style.display = "none";
				}
			}
		});
	});

	if (!hasMatchingProduct) {
		const listContainers = document.querySelectorAll(".list");
		listContainers.forEach((listContainer) => {
			listContainer.innerHTML = "";
		});

		const message = document.createElement("li");
		message.textContent = "죄송합니다. 현재 검색하신 상품은 없습니다.";

		listContainers[0].appendChild(message);
	}
}

function handleSearch() {
	const searchInput = document.querySelector('input[type="search"]');
	const searchText = searchInput.value;
	filterProductList(searchText);
}

document.addEventListener("DOMContentLoaded", function() {
	const searchButton = document.querySelector('button[aria-label="search"]');
	searchButton.addEventListener("click", handleSearch);

	const searchInput = document.querySelector('input[type="search"]');
	searchInput.addEventListener("keydown", function(event) {
		if (event.key === "Enter") {
			event.preventDefault();
			handleSearch();
		}
	});
});

window.addEventListener("load", initializePage);
