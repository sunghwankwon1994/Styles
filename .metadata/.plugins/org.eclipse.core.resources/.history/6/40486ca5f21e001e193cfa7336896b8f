// Fetch product data from the backend API
async function fetchProductData() {
	try {
		const response = await fetch(`/api/products/`);
		if (!response.ok) {
			throw new Error("Failed to fetch product data");
		}
		const products = await response.json();

		return products;
	} catch (error) {
		console.error(error);
		// Handle error case
		return null;
	}
}

function renderProductDetail(product) {
	const detailContainer = document.querySelector(".detail");
	detailContainer.innerHTML = `
	<img src="${product.imageUrl}" width="400px" height="500px">
	<div class="cloth">${product.name}</div>
	<div class="cloth">${product.category}</div>
	<div class="cloth2">${product.price}</div>
	<div class="size-input">
		<label for="size">Size:</label>
		<select id="size" name="size">
			<option value="XS">XS</option>
			<option value="S">S</option>
			<option value="M">M</option>
			<option value="L">L</option>
			<option value="XL">XL</option>
		</select>
	</div>
	<div class="quantity-input">
		<label for="quantity">Quantity:</label>
		<input type="number" id="quantity" name="quantity" min="1" value="1">
	</div>
	<button class="button" data-prd-id="${product.id}">Add Cart</button>
	<p>${product.description}</p>
	`;

	const addToCartButton = detailContainer.querySelector(".button");
	addToCartButton.addEventListener("click", function () {
		const productId = addToCartButton.getAttribute("data-prd-id");
		const size = document.getElementById("size").value;
		const quantity = document.getElementById("quantity").value;
		addToCart(productId, size, quantity);
	});
}

function addToCart(productId, size, quantity) {
	const data = {
		productId: productId,
		size: size,
		quantity: quantity
	};

	fetch('/api/cart/add/' + productId, {
		method: 'POST',
		headers: {
			'Content-Type': 'application/json'
		},
		body: JSON.stringify(data)
	})
		.then(response => {
			if (response.status === 401) {
				const confirmMessage = '장바구니에 추가하기 위해서는 로그인을 먼저 해주세요.';
				if (confirm(confirmMessage)) {
					window.location.href = '/login';
				}
			} else if (response.ok) {
				alert('제품이 장바구니에 추가되었습니다.');
			} else {
				console.error('Failed to add product to cart:', response.statusText);
			}
		})
		.catch(error => {
			console.error('Failed to add product to cart:', error);
		});
}

function renderProductList(products) {
	const listContainer = document.querySelector(".list");
	listContainer.innerHTML = "";

	if (products && products.length > 0) {
		products.forEach((product) => {
			const listItem = document.createElement("li");
			const link = document.createElement("a");
			const section = document.createElement("div");
			const image = document.createElement("img");
			const infoBox = document.createElement("div");
			const name = document.createElement("div");
			const context = document.createElement("div");
			const price = document.createElement("div");

			image.src = product.imageUrl;
			section.classList.add("section");
			section.appendChild(image);

			name.classList.add("clothes");
			name.textContent = product.name;

			context.classList.add("context");
			context.textContent = product.context;

			price.classList.add("price");
			price.textContent = product.price;

			infoBox.classList.add("info-box");
			infoBox.appendChild(name);
			infoBox.appendChild(context);
			infoBox.appendChild(price);

			link.appendChild(section);
			link.appendChild(infoBox);

			listItem.appendChild(link);
			listContainer.appendChild(listItem);

			link.addEventListener("click", function () {
				const url = `/products/${product.id}`;
				const newUrl = url.replace(/#.*/, ''); // Remove the hash part of the URL
				window.history.pushState(null, null, newUrl);
				renderProductDetail(product);
			});
		});
	} else {
		// Handle case when product data is not available
		listContainer.textContent = "No products found.";
	}
}

// Initialize the page
async function initializePage() {
	const products = await fetchProductData();

	// URL에서 상품 ID 파싱
	const url = window.location.pathname;
	const productId = parseInt(url.split("/").pop());

	// 상품 ID를 사용하여 해당 상품의 인덱스 구하기
	const productIndex = products.findIndex(product => product.id === productId);

	// 상```java
package com.semiproject.styles.cart;

import com.semiproject.styles.admin.User;
import com.semiproject.styles.admin.UserRepository;
import com.semiproject.styles.product.Product;
import com.semiproject.styles.product.ProductRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpSession;
import java.util.List;

@Controller
public class CartController {

    private final CartRepository cartRepository;
    private final UserRepository userRepository;
    private final ProductRepository productRepository;

    @Autowired
    public CartController(CartRepository cartRepository, UserRepository userRepository, ProductRepository productRepository) {
        this.cartRepository = cartRepository;
        this.userRepository = userRepository;
        this.productRepository = productRepository;
    }

    @GetMapping("/cart")
    public String viewCart(Model model, HttpSession session) {
        User user = (User) session.getAttribute("user");

        if (user == null) {
            // 로그인되지 않은 사용자는 로그인 페이지로 리다이렉트
            return "redirect:/login";
        }

        List<Cart> cartItems = cartRepository.findByUser(user);
        model.addAttribute("cartItems", cartItems);
        return "cart/cart";
    }

    @PostMapping("/api/cart/add/{productId}")
    public ResponseEntity<String> addToCart(@PathVariable("productId") Long productId, HttpSession session, @RequestParam("size") String size, @RequestParam("quantity") int quantity) {
        User user = (User) session.getAttribute("user");

        if (user == null) {
            // 로그인되지 않은 사용자는 로그인 페이지로 리다이렉트
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("User is not logged in");
        }

        Product product = productRepository.findById(productId).orElse(null);
        if (product == null) {
            // 상품을 찾을 수 없는 경우, 에러 응답
            return ResponseEntity.notFound().build();
        }

        // 동일한 상품이 이미 카트에 있는지 확인
        Cart existingCartItem = cartRepository.findByUserAndProductAndSize(user, product, size);
        if (existingCartItem != null) {
            // 이미 카트에 있는 경우, quantity 증가
            existingCartItem.setQuantity(existingCartItem.getQuantity() + quantity);
            cartRepository.save(existingCartItem);
            return ResponseEntity.ok().body("Product quantity increased in cart");
        }

        // 카트에 없는 경우, 새로운 카트 아이템 생성
        Cart cartItem = new Cart();
        cartItem.setUser(user);
        cartItem.setProduct(product);
        cartItem.setQuantity(quantity);
        cartItem.setSize(size);

        cartRepository.save(cartItem);

        return ResponseEntity.ok().body("Product added to cart");
    }

    @PostMapping("/cart/remove/{cartItemId}")
    public String removeFromCart(@PathVariable("cartItemId") Long cartItemId, HttpSession session) {
        User user = (User) session.getAttribute("user");

        if (user == null) {
            // 로그인되지 않은 사용자는 로그인 페이지로 리다이렉트
            return "redirect:/login";
        }

        cartRepository.deleteById(cartItemId);

        return "redirect:/cart";
    }
}
