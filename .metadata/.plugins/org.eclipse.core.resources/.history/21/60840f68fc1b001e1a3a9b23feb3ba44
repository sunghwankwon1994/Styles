package com.semiproject.styles.login;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class LoginController {
	private final AuthenticationManager authenticationManager;

	@Autowired
	public LoginController(AuthenticationManager authenticationManager) {
		this.authenticationManager = authenticationManager;
	}

	@GetMapping("/login")
	public String loginForm() {
		return "login/login";
	}

	@PostMapping("/login1")
	public String login(@RequestParam String email, @RequestParam String password, Model model) {
	    try {
	        System.out.println("Welcome");
	        System.out.println("Email: " + email);
	        System.out.println("Password: " + password);
	        UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(email, password);
	        Authentication authentication = authenticationManager.authenticate(token);
	        SecurityContextHolder.getContext().setAuthentication(authentication);

	        // 인증에 성공한 경우, 사용자 정보를 가져와 세션 또는 토큰에 저장
	        UserDetails userDetails = (UserDetails) authentication.getPrincipal();
	        // 세션 또는 토큰에 저장하는 로직 작성

	        return "redirect:/admin/users"; // 로그인 성공 시 리다이렉트할 경로
	    } catch (BadCredentialsException ex) {
	        System.out.println(email);
	        System.out.println(password);
	        model.addAttribute("error", "Invalid username or password");
	        return "login/login";
	    } catch (AuthenticationException ex) {
	        System.out.println(email);
	        System.out.println(password);
	        model.addAttribute("error", "Authentication error");
	        return "login/login";
	    } finally {
	        System.out.println("Outside of try-catch block");
	        // 리소스 해제 또는 정리 등의 마무리 작업 수행
	    }
	}

}